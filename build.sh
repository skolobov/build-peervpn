#!/bin/bash
# vim:ft=shell:ts=4:sw=4:sts=4:ai:

# Configurable parameters
export DEBFULLNAME="Sergei Kolobov"
export DEBEMAIL="sergei@kolobov.com"
export UBUNTU_RELEASE="bionic"
export LIBRESSL_SITE="https://ftp.openbsd.org/pub/OpenBSD/LibreSSL"
export LIBRESSL_VERSION="3.1.3"
export LIBRESSL_PKG_VER="1ppa1"
export PEERVPN_SITE="https://peervpn.net/files"
export PEERVPN_VERSION="0-044"
export PEERVPN_PKG_VER="1ppa2"

set -e # exit on any error

# Save top directory of the workspace
WORKDIR=$(pwd)

echo "==> Updating base Ubuntu packages"
sudo apt-get update
sudo apt-get upgrade -y

echo "==> Install basic packaging software"
sudo apt-get install -y build-essential ubuntu-dev-tools \
	autoconf automake autotools-dev \
	dh-make debhelper devscripts fakeroot \
	xutils lintian pbuilder gnupg pinentry-tty

echo "==> Setting up pbuilder"
if [ ! -d ~/pbuilder -o ! -f ~/pbuilder/${UBUNTU_RELEASE}-base.tgz ]; then
	pbuilder-dist ${UBUNTU_RELEASE}  create
fi

# Configure GPG
if [ ! -f ~/.gnupg/secring.gpg ]; then
	echo "==> GPG key not found, we should generate one"
	gpg --batch --quick-generate-key ${DEBEMAIL}
fi

GPG_KEY_ID=$(gpg --list-keys ${DEBEMAIL} | head -2 | tail -1 | awk '{print $1}')

export GPG_TTY=$(tty)

echo "==> Upload GPG key to Ubuntu keyserver"
gpg --keyserver keyserver.ubuntu.com --send-keys ${GPG_KEY_ID}

echo "==> Download LibreSSL"
# Download and import LibreSSL release signing key first
if [ ! -f libressl.asc ]; then
	wget ${LIBRESSL_SITE}/libressl.asc
fi
gpg --import libressl.asc

# Download LibreSSL release and GPG signature
LIBRESSL_ARCHIVE="libressl-${LIBRESSL_VERSION}.tar.gz"
if [ ! -f ${LIBRESSL_ARCHIVE} ]; then
	wget ${LIBRESSL_SITE}/${LIBRESSL_ARCHIVE}
fi
if [ ! -f ${LIBRESSL_ARCHIVE}.asc ]; then
	wget ${LIBRESSL_SITE}/${LIBRESSL_ARCHIVE}.asc
fi

echo "==> Verify GPG signature"
gpg --verify ${LIBRESSL_ARCHIVE}.asc

if [ ! -d libressl-${LIBRESSL_VERSION} ]; then
	echo "==> Extract LibreSSL release archive"
	tar xvzf ${LIBRESSL_ARCHIVE}
fi

if [ ! -f libressl_${LIBRESSL_VERSION}-${LIBRESSL_PKG_VER}.dsc ]; then
	cd libressl-${LIBRESSL_VERSION}

	echo "==> Create Debian package files"
	dh_make --single --file ../${LIBRESSL_ARCHIVE} --copyright gpl --yes
	echo "==> Remove unused/unneeded files generated by dh_make"
	rm debian/*ex debian/*EX debian/README* debian/*.docs
	echo "==> Copy over customized files"
	cp ${WORKDIR}/debian-libressl/* debian/
	echo "==> Build Debian package"
	dpkg-buildpackage -rfakeroot -S
fi

cd ${WORKDIR}
if [ ! -f libressl_${LIBRESSL_VERSION}-${LIBRESSL_PKG_VER}_source.changes ]; then
	echo "==> Upload packages to Launchpad PPA"
	dput ppa:skolobov/ppa libressl_${LIBRESSL_VERSION}-${LIBRESSL_PKG_VER}_source.changes
fi
echo "==> Built Ubuntu package for LibreSSL"

# Install build-time dependencies for PeerVPN
sudo dpkg -i libressl_${LIBRESSL_VERSION}-${LIBRESSL_PKG_VER}_amd64.deb
sudo apt-get install -y zlib1g-dev

echo "==> Download PeerVPN"
# Download PeerVPN release
PEERVPN_ARCHIVE="peervpn-${PEERVPN_VERSION}.tar.gz"
if [ ! -f ${PEERVPN_ARCHIVE} ]; then
	wget ${PEERVPN_SITE}/${PEERVPN_ARCHIVE}
	# Copy original tarball
	cp ${PEERVPN_ARCHIVE} peervpn_${PEERVPN_VERSION/-/.}.orig.tar.gz
fi

if [ ! -d peervpn-${PEERVPN_VERSION} ]; then
	echo "==> Extract PeerVPN release archive"
	tar xvzf ${PEERVPN_ARCHIVE}
fi

if [ ! -f peervpn_${PEERVPN_VERSION/-/.}-${PEERVPN_PKG_VER}.dsc ]; then
	cd peervpn-${PEERVPN_VERSION}

	echo "==> Create Debian package files"
	dh_make --single --file ../${PEERVPN_ARCHIVE} --copyright gpl --yes
	echo "==> Remove unused/unneeded files generated by dh_make"
	rm debian/*ex debian/*EX debian/README* debian/*.docs
	echo "==> Copy over customized files"
	cp -r ${WORKDIR}/debian-peervpn/* debian/
	echo "==> Build Debian package"
	dpkg-buildpackage -rfakeroot -S
fi

cd ${WORKDIR}
if [ ! -f peervpn_${PEERVPN_VERSION/-/.}-${PEERVPN_PKG_VER}_source.changes ]; then
	echo "==> Upload packages to Launchpad PPA"
	dput ppa:skolobov/ppa peervpn_${PEERVPN_VERSION/-/.}-${PEERVPN_PKG_VER}_source.changes
fi
echo "==> Built Ubuntu package for PeerVPN"

